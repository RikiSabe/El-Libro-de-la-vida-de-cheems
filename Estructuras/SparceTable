struct SparseTable {
    vector<vector<ll>> st;  
    vector<ll> log;        
    vector<ll> arr; 
    
    void build(const vector<ll>& input_arr) { // indexed by 1
        arr = input_arr;  // Store the original array
        ll n = arr.size() - 1;  // size of arr (index 0 is not used)
        ll j_max = 20;
        
        st.assign(n + 1, vector<ll>(j_max));
        log.assign(n + 1, 0);
        
        for (int i = 2; i <= n; ++i) {
            log[i] = log[i / 2] + 1;
        }
        
        for (int i = 1; i <= n; ++i) st[i][0] = i;
        
        for (int j = 1; (1 << j) <= n; ++j) {
            for (int i = 1; i + (1 << j) - 1 <= n; ++i) {
                if (arr[st[i][j - 1]] < arr[st[i + (1 << (j - 1))][j - 1]]) {
                    st[i][j] = st[i][j - 1];
                } else {
                    st[i][j] = st[i + (1 << (j - 1))][j - 1];
                }
            }
        }
    }
    
    // Function to perform range minimum query (return index) [l, r]
    int query(int L, int R) const {
        int j = log[R - L + 1];
        if (arr[st[L][j]] <= arr[st[R - (1 << j) + 1][j]]) return st[L][j];
        else return st[R - (1 << j) + 1][j];
    }
    int query2(int L, int R) const { // return just the minimun value
	int j = log[R - L + 1];
	return min(arr[st[L][j]], arr[st[R - (1 << j) + 1][j]]);
    }
};

int main() {
    vector<int> arr = {0, 3, 4, 1, 6, 2, 3};  // index 0 is not used
    int n = arr.size() - 1;  // size of arr
    
    SparseTable st;
    st.build(arr);
    
    int min_index = st.query(L, R);
    cout << st.arr[min_index] << endl;
    
    return 0;
}


// gcd
struct SparseTable {
    vector<vector<ll>> st;  // Sparse Table
    vector<ll> log;         // Logarithm table
    vector<ll> arr;         // Original array
    void build(const vector<ll>& input_arr) {
        arr = input_arr;  // Store the original array
        ll n = arr.size() - 1;  // Size of arr (index 0 is not used)
        ll j_max = 20;  // Should be sufficient for most cases 
        st.assign(n + 1, vector<ll>(j_max));
        log.assign(n + 1, 0); 
        for (int i = 2; i <= n; ++i) {
            log[i] = log[i / 2] + 1;
        }        
        for (int i = 1; i <= n; ++i) st[i][0] = arr[i]; 
        for (int j = 1; (1 << j) <= n; ++j) {
            for (int i = 1; i + (1 << j) - 1 <= n; ++i) {
                st[i][j] = __gcd(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
            }
        }
    } 
    // Function to perform range GCD query [L, R]
    ll query(int L, int R) const {
        int j = log[R - L + 1];
        return __gcd(st[L][j], st[R - (1 << j) + 1][j]);
    }
};
