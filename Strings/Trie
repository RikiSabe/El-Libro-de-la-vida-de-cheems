int Trie[N][26]; // N = 1e6
int FinishPoint[N];
int Cnt[N];
int nodes = 1;

void add(string s, int val) {
	int cur = 0;
	for(char c : s) {
		if(!Trie[cur][c - 'a']) {
			Trie[cur][c - 'a'] = nodes ++;
		}
		cur = Trie[cur][c - 'a'];
		Cnt[cur] += val;
	}	
	FinishPoint[cur] ++;
}

int qry1(string s) {
	int cur = 0;
	int ans = 0;
	for(char c : s) {
		if(!Trie[cur][c - 'a'])
			break;
		cur = Trie[cur][c - 'a'];
		ans += FinishPoint[cur];
	}	
	return ans;
}

int qry2(string s){
	int cur = 0;
	for(char c : s) {
		if(!Trie[cur][c - 'a'])
			return 0;
		cur = Trie[cur][c - 'a'];
	}	
	return Cnt[cur];
}

void solve(int testCase) {
	int q; cin >> q;
	int cmd; string s; 
	FOR(i, 0, q) {
		cin >> cmd >> s;
		if(cmd == 0) {
			add(s, 1); // delete (s, -1)
		}
		else if(cmd == 1) { //cuantos strings como prefijo de S.
			cout << qry1(s) << endl;
		}
		else if(cmd == 2) { // cuantos strings tienen a S como prefijo
			cout << qry2(s) << endl;
		}
	}
} 
