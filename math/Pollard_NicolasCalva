ll binpow(ll a, ll b, ll m){
    a %= m;
    ll res = 1LL;
    while(b > 0){
        if( b & 1LL ) res = (res * a) % m;
        a = (a * a) % m;
        b >>= 1;
    }
    return res;
}

bool is_prime_prob(ll n, int a){
    if(n == a)return true;
    ll s = 0, d = n - 1LL;
    while(d % 2LL == 0) { s++; d >>= 1LL;}
    ll x = binpow(a, d, n);
    if( (x == 1LL) || (x + 1LL == n) ) return true;
    FOR(_, 0, s - 1LL){
        // x = mulmod(x,x,n);
        x = (x * x) % n;
        if(x == 1LL) return false;
        if(x + 1LL == n) return true;
    }
    return false;
}

bool rabin(ll n){ // true iff n is prime
    if(n == 1LL) return false;
    int ar[] = {2,3,5,7,11,13,17,19,23};
    FOR(i,0,9) {
        if(!is_prime_prob(n, ar[i])) return false;
    }
    return true;
}

// optimized version: replace rho and fact with the following:
const int MAXP = 1e6+1; // sieve size
int sv[MAXP]; // sieve

ll add(ll a, ll b, ll m){ 
    return (a += b) < m ? a : a-m; 
}

ll rho(ll n){
    static ll s[MAXP];
    while( 1 ){
        ll x = rand() % n, y = x, c = rand() % n;
        ll *px = s, *py = s, v = 0LL, p = 1LL;
        while( 1 ){
            *py++ = y = add((y * y) % n, c, n);
            *py++ = y = add((y * y) % n, c, n);
            if((x = *px++) == y) break;
            ll t = p;
            p = (p * abs(y - x)) % n;
            if(!p) return __gcd(t, n);
            if(++v == 26){
                if((p=gcd(p,n)) > 1LL && p < n) return p;
                v = 0;
            }
        }
        if(v && (p=__gcd(p, n)) > 1LL && p < n) return p;
    }
}

void init_sv(){
    FOR(i,2,MAXP) {
        if( !sv[i] ){
            for(ll j = i ; j < MAXP ; j += i) {
                sv[j] = i;
            }
        }
    }
}

void fact(ll n, map<ll,int>& f){ // call init_sv first!!!
    for(auto&& p : f){
        while( n % p.first == 0){
            p.second++; 
            n /= p.first;
        }
    }
    if(n < MAXP) {
        while(n > 1LL){
            f[ sv[n] ]++;
            n /= sv[n];
        }
    }
    else if( rabin(n) ) {
        f[n]++;
    }
    else {
        ll q = rho(n);
        fact(q, f);
        fact(n/q, f);
    }
}

void solve(int testCase) { // cortecia del rikisabe
    ll n; cin >> n;
    map<ll,int> factors;
    fact(n, factors);
    debugIterablePairs(factors);
}

void init(){
    // sin esto da TLE
    init_sv();
}
