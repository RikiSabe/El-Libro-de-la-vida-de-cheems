#include <bits/stdc++.h>
using namespace std;

long double intersectionArea(long double X1, long double Y1,
				long double R1, long double X2,
				long double Y2, long double R2)
{
	long double Pi = acos(-1);
	long double d, alpha, beta, a1, a2;
	long double ans;

	d = sqrt((X2 - X1) * (X2 - X1) + (Y2 - Y1) * (Y2 - Y1));

	if (d > R1 + R2)
		ans = 0;

	else if (d <= (R1 - R2) && R1 >= R2)
		ans = (Pi * R2 * R2);

	else if (d <= (R2 - R1) && R2 >= R1)
		ans = (Pi * R1 * R1);

	else {
		alpha = acos((R1 * R1 + d * d - R2 * R2)
					/ (2 * R1 * d))
				* 2;
		beta = acos((R2 * R2 + d * d - R1 * R1)
					/ (2 * R2 * d))
				* 2;
		a1 = 0.5 * beta * R2 * R2
			- 0.5 * R2 * R2 * sin(beta);
		a2 = 0.5 * alpha * R1 * R1
			- 0.5 * R1 * R1 * sin(alpha);
		ans = (a1 + a2);
	}

	return ans;
}

int main()
{
	int t; cin >> t;
	while(t --) {
		int X1 = 0, Y1 = 0, R1 = 4;
		int X2 = 6, Y2 = 0, R2 = 4;
		cin >> X1 >> Y1 >> R1 >> X2 >> Y2 >> R2;
		cout << fixed << setprecision(6) << intersectionArea(X1, Y1, R1, X2, Y2, R2) << endl;
	}
	return 0;
}
